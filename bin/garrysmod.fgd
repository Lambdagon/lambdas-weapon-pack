
@include "base.fgd"
@include "halflife2.fgd"

@SolidClass = func_ladder :
	"Ladder. Players will be able to move freely along this brush, as if it was a ladder." +
	"Apply the toolsinvisibleladder material to a func_ladder brush."
[
]

@SolidClass base(Targetname, Parentname) = func_detail_blocker : 
	"A brush entity that prevents detail sprites from being placed inside its volume."
[
]

@PointClass base(Targetname) iconsprite("editor/lua_run.vmt") = lua_run : "Runs Lua Code"
[
	Code(string) : "Code" : "" : "Lua code to run when triggered"

	spawnflags(flags) =
	[
		1  : "Run code on spawn": 0
	]

	input RunCode(void) : "Run Code that was defined in the entity"
	input RunPassedCode(string) : "Run code that was passed as a variable"
]

@PointClass base(Targetname, Parentname, Angles) studioprop( "models/editor/spot.mdl" ) frustum(lightfov,nearz,farz,lightcolor,-1) = env_projectedtexture : "Projected texture entity."
[
	spawnflags(flags) =
	[
		1  : "Enabled"			: 1
	]

	target(target_destination)	: "target" : : "target"
	lightfov(float)				: "FOV" : "90.0" : "FOV"
	nearz(float)				: "NearZ" : "4.0" : "Near Z for projected texture"
	farz(float)					: "FarZ" : "750.0" : "Far Z for projected texture"

	enableshadows(Choices) : "Enable Shadows" : 1 : "Enables/disables shadows from this projected texture." =
	[
		0 : "No"
		1 : "Yes"
	]
	lightonlytarget(Choices) : "Light Only Target" : 0 : "Limit flashlight effect to only effect target entity." =
	[
		0 : "No"
		1 : "Yes"
	]
	lightworld(Choices) : "Light World" : 1 : "Control whether flashlight effects static world geometry." =
	[
		0 : "No"
		1 : "Yes"
	]
	lightcolor(color255)		: "Light Color" : "255 255 255" : "Light Color RGB-Intensity"
	lightstrength(float)		: "Light Strength" : "1.0" : "How bright the light appears"
	cameraspace(integer)		: "Camera Space" : 0 : "Angles are interpreted as being relative to camera."

	texturename(string) 		: "Texture Name" : "effects/flashlight001" : "The name of the texture to use"
	textureframe(integer) 		: "Texture Frame" : 0 : "The frame of the texture"

	// Inputs
	input TurnOn(void)					: "Turn on the texture"
	input TurnOff(void)					: "Turn off the texture"
	input SetFOV(float)					: "Set FOV"
	input SpotlightTexture(string)		: "Set Spotlight Texture"
	input Ambient(float)				: "Set Spotlight Ambient"

]

@PointClass base(Targetname) iconsprite("editor/env_skypaint.vmt") = env_skypaint : "Control the sky colours"
[
	topcolor(color1)		: "Sky Top Color" : "0.2 0.5 1.0" : "The colour of the top of the sky"
	bottomcolor(color1)		: "Sky Bottom Color" : "0.8 1.0 1.0" : "The colour of the bottom of the sky"
	fadebias(float)			: "Sky Fade Bias" : "1.0" : "Controls the bias of the fade between top/bottom (1.0 is even)"

	sunsize(float)			: "Sun Size" : "2.0" : "Controls the size of the sun glow"
	sunnormal(vector )		: "Sun Normal" : "0.4 0.0 0.01" : "The position of the sun, expressed as a normal from the center of the world"
	sunposmethod(choices)	: "Sun Position Method" : 0 : "How should we determine the position of the sun?" =
	[
		0 : "Custom - Use the Sun Normal to position the sun"
		1 : "Automatic - Find a env_sun entity and use that"
	]
	suncolor(color1)		: "Sun Color" : "0.2 0.1 0.0" : "The color of the sun glow (this is additive)"

	duskscale(float)		: "Dusk Scale" : "1.0" : "The size of the dusk effect (colouring of the horizon)"
	duskintensity(float)	: "Dusk Intensity" : "1.0" : "How powerful the dusk effect is"
	duskcolor(color1)		: "Dusk Color" : "1.0 0.2 0.0" : "The color of the dusk effect"

	drawstars(choices)		: "Draw Stars" : 0 : "" =
	[
		0 : "No - Don't draw stars"
		1 : "Yes - Draw the stars please"
	]

	startexture(string) 	: "Star Texture" : "skybox/starfield" : "The star texture"
	starscale(float)		: "Star Scale" : "0.5" : "How big the star texture should be"
	starfade(float)			: "Star Fade" : "1.0" : "Fade the star texture towards the horizon"
	starspeed(float)		: "Star Speed" : "0.01" : "How fast the star texture should scroll across the sky"

	hdrscale(float)			: "HDR Scale" : "0.66" : "When rendering your skybox in HDR mode, output will be scaled by this amount."
]

@PointClass base(Targetname, Parentname, RenderFields, Angles, DXLevelChoice) studio("models/editor/cone_helper.mdl") = beam_spotlight : 
	"An entity to draw a spotlight. Will draw a beam when the player views it side on, and a halo when it's facing towards the player. "+
	"Unless the 'No Dynamic Light' spawnflag is checked, it will also create a dynamic light wherever the end of the spotlight rests." +
	"This spotlight is entirely client side, it is not sync'd across clients."
[
	spawnflags(Flags) = 
	[
		1 : "Start On" : 1
		2 : "No Dynamic Light" : 0
		4 : "Start rotation on" : 0
		8 : "Reverse Direction" : 0
		16 : "X Axis"  : 0
		32 : "Y Axis"  : 0
	]

	maxspeed(integer) : "Max Rotation Speed" : 100 : "The maximum rotation speed of the spotlight, in degrees per second."

	spotlightlength(integer) : "Spotlight Length" : 500 : "Length of the spotlight beam."
	spotlightwidth(integer) : "Spotlight Width" : 50 : "Width of the spotlight beam."
	rendercolor(color255) : "Color (R G B)" : "255 255 255"
	HDRColorScale(float) : "HDR color scale." : "0.7" : "float value to multiply sprite color by when running in HDR mode."
	
	// Inputs
	input LightOn(void) : "Turn the spotlight on."
	input LightOff(void) : "Turn the spotlight off"
	input Start(void) : "Start the rotator rotating."
	input Stop(void) : "Stop the rotator from rotating."
	input Reverse(void) : "Reverse the direction of rotation of the rotator."
	
	// outputs
	output OnLightOn(void) : "Fires when light turns on."
	output OnLightOff(void) : "Fires when light turns off."
]
